// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CCPlugin
@_exported import CCPlugin
import Foundation
import SafariServices
import Swift
import SystemConfiguration
import UIKit
public enum Mode : Swift.String {
  case stage
  case sandbox
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol CCPluginCompletionHandlerDelegate : AnyObject {
  func success()
  func failure()
}
public protocol CCPluginSubscribeBtnTapDelegate : AnyObject {
  func subscribeBtnTap()
}
public protocol CCPluginSignBtnTapDelegate : AnyObject {
  func signInTap()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CCplugin : ObjectiveC.NSObject {
  public static let shared: CCPlugin.CCplugin
  final public var mode: CCPlugin.Mode
  final public var debugMode: Swift.Bool
  final public var accentColor: UIKit.UIColor
  final public func configure(mode: CCPlugin.Mode = .stage, clientID: Swift.String)
  final public func showPayWall(contentID: Swift.String, viewLayout: CCPlugin.ViewLayoutInfo, completiondelegate: CCPlugin.CCPluginCompletionHandlerDelegate, subscriberDelegate: CCPlugin.CCPluginSubscribeBtnTapDelegate? = nil, signInDelegate: CCPlugin.CCPluginSignBtnTapDelegate? = nil)
  @objc deinit
}
extension CCplugin {
  final public func handleRelaunchApp(url: Foundation.URL)
}
public struct ViewLayoutInfo {
  public var vc: UIKit.UIViewController
  public var view: UIKit.UIView
  public init(vc: UIKit.UIViewController, view: UIKit.UIView)
}
extension CCPlugin.Mode : Swift.Equatable {}
extension CCPlugin.Mode : Swift.Hashable {}
extension CCPlugin.Mode : Swift.RawRepresentable {}
